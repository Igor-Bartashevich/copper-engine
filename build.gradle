import groovy.xml.NamespaceBuilder
import groovy.xml.QName


task wrapper(type: Wrapper) {
    gradleVersion = '1.8'
}


buildscript {
    repositories {
        jcenter() // needed for gradle-nexus-plugin
        mavenCentral() // needed for nexus-workflow plugin
    }
    dependencies {
        // The nexus plugin makes uploading to Sonatype Nexus repository easier.
        // See https://github.com/bmuschko/gradle-nexus-plugin for documentation
        classpath 'org.gradle.api.plugins:gradle-nexus-plugin:0.6.1'
        // The nexus-workflow plugin automates the staging/promotion/release process on Sonatype OSS
        // by providing the task 'nexusStagingRelease'.
        // See https://github.com/adaptivecomputing/plugins-gradle/tree/master/nexus-workflow
        // and http://stackoverflow.com/questions/20432907/automated-release-to-maven-central-with-gradle
        classpath 'com.adaptc.gradle:nexus-workflow:0.5'
    }
}


allprojects {
    apply plugin: 'project-report'

    group = "org.copper-engine"

    repositories {
        mavenCentral()
    }
}


configure(subprojects.findAll {
    new File(it.projectDir, 'src/main/java').directory || new File(it.projectDir, 'src/main/schema').directory
}) {
    println "configuring java module " + project.path

    apply plugin: 'java'
    compileJava.options.encoding = 'utf-8'
    compileJava.sourceCompatibility = JavaVersion.VERSION_1_6
    compileJava.targetCompatibility = JavaVersion.VERSION_1_6
    compileTestJava.options.encoding = 'utf-8'
    compileTestJava.sourceCompatibility = JavaVersion.VERSION_1_6
    compileTestJava.targetCompatibility = JavaVersion.VERSION_1_6

    /*
    apply plugin: 'checkstyle'
    checkstyle {
        configFile file("$rootDir/common/checkstyle.xml")
        configProperties = [ "rootDir": "$rootDir" ]
        ignoreFailures false
    }
    checkstyleMain.source = [ 'src/main/java' ] // only check main source files, not generated content
    assemble.dependsOn checkstyleMain, checkstyleTest
    */

    apply plugin: 'eclipse'
    eclipse {
        classpath {
            defaultOutputDir = file('build')
            file {
                //exclude slf4f log binding from export
                withXml {
                    Node root = it.asNode()
                    NodeList nodeList = root.getAt(new QName('classpathentry'))
                    nodeList.each { Node classpathentry ->
                        if (classpathentry.attributes().path.contains('slf4j-log4j12')) {
                            classpathentry.attributes().remove('exported')
                        }
                    }
                }
            }
        }
        jdt {
            file {
                // add our code style settings to every eclipse project
                withProperties { properties ->
                    def codestyle = new XmlParser().parse(file("$rootDir/common/eclipse-codestyle.xml"))
                    codestyle.profile[0].setting.each {
                        properties.put(it.'@id', it.'@value')
                    }
                }
                whenMerged {
                    def uiprops = new Properties();
                    uiprops.put('eclipse.preferences.version', '1')
                    uiprops.put('formatter_profile', '_SCOOP-CodeStyle')
                    uiprops.put('formatter_settings_version', '12')
                    uiprops.store(file("$projectDir/.settings/org.eclipse.jdt.ui.prefs").newWriter(), "generated by build.gradle")
                }
            }
        }
    }
    // be sure to always regenerate eclipse files, because default behavior is merging into existing files
    tasks.eclipse.dependsOn cleanEclipse
    eclipse.classpath.defaultOutputDir = new File("$buildDir/classes/main")

    dependencies {
        testCompile 'junit:junit:4.11'
        testCompile 'org.mockito:mockito-all:1.9.5'
        compile 'org.slf4j:slf4j-api:1.6.6'
    }

    jar {
        manifest.attributes provider: 'gradle'
    }

//    task addMissingLicenseHeaders {
//        println "Replacing java source file headers in " + project.path
//
//        def licenseFile = file("$rootDir/common/apache-license-file.txt")
//        ant.loadfile(srcFile: licenseFile, property: 'licenseHeader')
//        def licenseHeader = "${ant.properties['licenseHeader']}"
//
//        ant.replaceregexp(match: '(/\\*.*\\*/.*)??^package ', flags: 'sm', replace: licenseHeader + "package ") {
//            fileset(dir: "$projectDir/src") {
//                include(name: '**/*.java')
//            }
//        }
//    }

    javadoc {
        options.encoding = "UTF-8"
    }

    if (project.hasProperty('secretKeyRingFileSourceURL')) {
        // the nexus plugin makes uploading to Sonatype Nexus repository easier
        // see https://github.com/bmuschko/gradle-nexus-plugin for documentation
        apply plugin: 'nexus'
        nexus {
            attachTests = true
            sign = true
        }

        // task to fetch the GPG key to sign the JAR archives
        // we put the key to build/secring.gpg where it will be picked up by the uploadArchives task of the nexus plugin
        task fetchSecretKeyRingFile << {
            file(secretKeyRingFileDestFile).getParentFile().mkdirs()
            ant.get(src: secretKeyRingFileSourceURL, dest: secretKeyRingFileDestFile, username: secretKeyRingFileSourceURLAuthUsername, password: secretKeyRingFileSourceURLAuthPassword)
        }
        afterEvaluate {
            // always fetch the GPG key before signing archives
            tasks.signArchives.dependsOn fetchSecretKeyRingFile
        }

        // WORKAROUND: sign poms before performing "uploadArchives".
        // This workaround (the whole "afterEvaluate" block) can be removed when gradle-nexus-plugin issue #19
        // is resolved, see https://github.com/bmuschko/gradle-nexus-plugin/issues/19
        afterEvaluate {
            signing {
                project.gradle.taskGraph.whenReady {
                    def uploadTasks = project.tasks.withType(Upload).matching { it.path.endsWith(":uploadArchives") }
                    uploadTasks.each { task ->
                        task.repositories.mavenDeployer() {
                            beforeDeployment { MavenDeployment deployment ->
                                project.signing.signPom(deployment)
                            }
                        }
                    }
                }
            }
        }
        // END WORKAROUND

        modifyPom {
            project {
                name = 'COPPER high-performance workflow engine'
                packaging = 'jar'
                description = 'COPPER is an open-source, powerful, light-weight, and easily configurable workflow engine. The power of COPPER is that it uses Java as a description language for workflows.'
                url 'http://copper-engine.org/'

                scm {
                    url 'https://github.com/copper-engine/copper-engine'
                    connection 'scm:git@github.com:copper-engine/copper-engine.git'
                }

                licenses {
                    license {
                        name = 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id 'copper-team'
                        name = 'Copper Engine Development Team'
                        roles {
                            role 'architect'
                            role 'developer'
                            role 'tester'
                        }
                    }
                }
            }
        }
    }
}


configure(rootProject) {
    // The nexus-workflow plugin automates the staging/promotion/release process on Sonatype OSS
    // by providing the task 'nexusStagingRelease'. We perform "nexusStagingRelease" only if the current
    // version is not a SNAPSHOT release.
    apply plugin: 'nexus-workflow'
    tasks.nexusStagingRelease.onlyIf { !version.endsWith("-SNAPSHOT") }

    // task to create source distribution containing all source files
    // note: this task won't run automatically; it must be called explicitely
    task fullSourcesJar(type: Jar) {
        classifier = 'sources-full'
        from project.rootDir
        exclude '**/build/'
        exclude '**/classes/'
        exclude '**/generated/'
        exclude '.gradle/'
        exclude '.idea'
        exclude '**/*.iml'
        exclude '**/*.log'
        exclude '**/*.classpath'
        exclude '**/*.project'
        exclude '**/*.settings/'
    }

    // copy Intellij Codestyle settings each time 'gradle assemble' or 'gradle build' is performed on the root project
    task ideaCodeStyleSetup(type: Copy) {
        from 'common/intellij-codestyle.xml'
        into '.idea/'
        rename '.+', 'codeStyleSettings.xml'
    }
    ideaCodeStyleSetup.onlyIf { file(".idea").exists() }
    assemble.dependsOn ideaCodeStyleSetup
}


project(':projects:copper-jmx-interface') {
    dependencies {
    }
}


project(':projects:copper-regtest') {
    sourceSets {
        workflow {
            ext.srcDir = "$projectDir/src/workflow/java"
        }
    }
    sourceSets.test.resources.srcDirs += sourceSets.workflow.srcDir

    dependencies {
        compile project(':projects:copper-jmx-interface')
        compile project(':projects:copper-coreengine')
        compile project(':projects:copper-spring')

        testCompile 'c3p0:c3p0-oracle-thin-extras:0.9.0.2'
        testCompile 'mysql:mysql-connector-java:5.1.25'
        testCompile 'org.apache.derby:derby:10.9.1.0'
        testCompile 'postgresql:postgresql:9.1-901.jdbc4'
        testCompile 'com.h2database:h2:1.3.171'

        testCompile 'org.slf4j:slf4j-log4j12:1.6.6'
        testCompile 'log4j:log4j:1.2.17'

        compile fileTree(dir: "$rootDir/3rdPartyLibs", include: '*.jar')
    }

    test {
        //configuring a system property for tests
        systemProperty 'copper.unittest.skip.external.db.tests', 'true'
    }
}


project(':projects:copper-spring') {
    dependencies {
        compile project(':projects:copper-jmx-interface')
        compile project(':projects:copper-coreengine')

        // Spring
        compile 'org.springframework:spring-aop:3.1.2.RELEASE'
        compile 'org.springframework:spring-asm:3.1.2.RELEASE'
        compile 'org.springframework:spring-beans:3.1.2.RELEASE'
        compile 'org.springframework:spring-context:3.1.2.RELEASE'
        compile 'org.springframework:spring-core:3.1.2.RELEASE'
        compile 'org.springframework:spring-expression:3.1.2.RELEASE'
        compile 'org.springframework:spring-jdbc:3.1.2.RELEASE'
        compile 'org.springframework:spring-tx:3.1.2.RELEASE'

        compile 'org.springframework.batch:spring-batch-infrastructure:2.1.8.RELEASE'
    }
}


project(':projects:copper-coreengine') {
    dependencies {
        compile project(':projects:copper-jmx-interface')

        compile 'com.google.code.findbugs:annotations:2.0.1'

        // asm
        compile 'org.ow2.asm:asm:4.1'
        compile 'org.ow2.asm:asm-commons:4.1'
        compile 'org.ow2.asm:asm-tree:4.1'
        compile 'org.ow2.asm:asm-util:4.1'
        compile 'org.ow2.asm:asm-analysis:4.1'

        // commons
        compile 'commons-codec:commons-codec:1.4'

        // Database
        compile 'c3p0:c3p0:0.9.1.2'
    }

    task scriptsZip(type: Zip) {
        classifier = 'scripts'
        from file("src/main/database")
        into 'scripts/sql'
    }
    assemble.dependsOn scriptsZip

    artifacts {
        archives scriptsZip
    }
}


project(':projects:copper-examples:orchestration:orch-engine') {
    sourceSets {
        workflow {
            ext.srcDir = "$projectDir/src/workflow/java"
        }
    }
    sourceSets.main.resources.srcDirs += sourceSets.workflow.srcDir

    dependencies {
        compile project(':projects:copper-jmx-interface')
        compile project(':projects:copper-coreengine')
        compile project(':projects:copper-spring')
        compile project(':projects:copper-monitoring:copper-monitoring-server')
        compile project(':projects:copper-examples:orchestration:orch-interfaces')
        compile 'org.apache.derby:derby:10.9.1.0'
        compile 'log4j:log4j:1.2.17'
    }
}


project(':projects:copper-examples:orchestration:orch-interfaces') {
    configurations {
        wsgen
    }

    sourceSets {
        schema {
            ext.srcDir = "$projectDir/src/main/schema"
        }
    }
    sourceSets.main.resources.srcDirs += sourceSets.schema.srcDir

    dependencies {
        compile project(':projects:copper-coreengine')
        compile 'log4j:log4j:1.2.17'

        compile('org.apache.cxf:cxf-rt-transports-http-jetty:2.5.3') {
            exclude module: 'spring-web'
        }
        compile('org.apache.cxf:cxf-rt-frontend-jaxws:2.5.3') {
            exclude module: 'spring-web'
        }
        compile 'org.eclipse.jetty:jetty-server:7.5.4.v20111024'
        compile 'commons-lang:commons-lang:2.6'

        wsgen 'org.apache.cxf:cxf-tools-wsdlto-core:2.6.0'
        wsgen 'org.apache.cxf:cxf-tools-wsdlto-frontend-jaxws:2.6.0'
        wsgen 'org.apache.cxf:cxf-tools-wsdlto-databinding-jaxb:2.6.0'
        wsgen 'org.apache.cxf:cxf-xjc-ts:2.2.12'
        wsgen 'com.sun.xml.bind:jaxb-xjc:2.2.4-1'
    }

    tasks.create(name: "gen_wsbindings") {
        ext.genDirName = "$projectDir/src/main/generated";

        inputs.dir file(sourceSets.schema.srcDir)
        outputs.dir file(ext.genDirName)

        doFirst {
            file(ext.genDirName).mkdirs()
        }
        doLast {
            fileTree(dir: sourceSets.schema.srcDir + "/wsdl", include: "**/*.wsdl", exclude: "common.wsdl").each {
                def wsdlFile ->
                    javaexec {
                        main = 'org.apache.cxf.tools.wsdlto.WSDLToJava'
                        classpath = configurations.wsgen
                        // Add -DexitOnFinish=true so that WSDLToJava bails out with exit code 0 (on success) or 1 (on failure)
                        // so that the build aborts immediately on errors. If you don't set this property, the exit code is always 0.
                        systemProperty 'exitOnFinish', 'true'
                        args = ['-fe', 'jaxws',
                                '-db', 'jaxb',
                                '-xjc-extension',
                                '-impl', '-server', '-client', '-validate',
                                '-d', ext.genDirName,
                                '-wsdlLocation', 'classpath:wsdl/' + wsdlFile.name,
                                wsdlFile]
                    }
            }
        }
    }
    sourceSets.main.java.srcDirs += gen_wsbindings.genDirName

    compileJava.dependsOn gen_wsbindings
    eclipseClasspath.dependsOn gen_wsbindings

    eclipse {
        classpath {
            defaultOutputDir = file('build')
            file {
                withXml {
                    //ignore compile warnings in generated code
                    it.asNode().find {
                        it.@kind == 'src' && gen_wsbindings.genDirName.contains(it.@path)
                    }
                    .appendNode('attributes')
                            .appendNode('attribute', [name: "ignore_optional_problems", value: "true"])
                }
            }
        }
    }
}


project(':projects:copper-examples:orchestration:orch-simulators') {
    dependencies {
        compile project(':projects:copper-coreengine')
        compile project(':projects:copper-examples:orchestration:orch-interfaces')
        compile 'log4j:log4j:1.2.17'
        compile 'org.slf4j:slf4j-api:1.6.6'
    }
}


project(':projects:copper-monitoring:copper-monitoring-server') {
    dependencies {
        compile project(':projects:copper-jmx-interface')
        compile project(':projects:copper-monitoring:copper-monitoring-core')
        compile project(':projects:copper-coreengine')

        //Spring remote
        compile 'org.springframework:spring-web:3.1.2.RELEASE'
        compile 'commons-httpclient:commons-httpclient:3.1'
        compile 'org.springframework:spring-webmvc:3.1.2.RELEASE'

        //http server
        compile 'org.eclipse.jetty:jetty-server:8.1.10.v20130312'
        compile 'org.eclipse.jetty:jetty-servlets:8.1.10.v20130312'
        compile 'org.eclipse.jetty:jetty-util:8.1.10.v20130312'
        compile 'org.eclipse.jetty:jetty-webapp:8.1.10.v20130312'

        compile 'com.google.guava:guava:14.0.1'

        compile 'ch.qos.logback:logback-classic:1.0.13'

        compile 'org.apache.derby:derby:10.9.1.0'
        
        compile 'log4j:log4j:1.2.17'
    }
}


project(':projects:copper-monitoring:copper-monitoring-client') {
    apply plugin: 'application'

    mainClassName = "org.copperengine.monitoring.client.main.MonitorMain"

    // Copy resources files from src/main/java (*.fxml files) to classes dir.
    // Note that we don't mark src/main/java as resource folder as it causes problems with IntelliJ
    processResources {
        doLast {
            copy {
                from "$projectDir/src/main/java"
                into sourceSets.main.output.classesDir
                include "**/*"
                exclude "**/*.java"
            }
        }
    }

    eclipse {
        classpath {
            defaultOutputDir = file('build')
            file {
                withXml {
                    Node root = it.asNode()
                    // modify some classpath entries
                    NodeList nodeList = root.getAt(new QName('classpathentry'))
                    nodeList.each { Node classpathentry ->
                        // workaround to append javadoc for javafx
                        if (classpathentry.attributes().path.contains('jfxrt.jar')) {
                            classpathentry.appendNode('attributes').appendNode('attribute', [name: 'javadoc_location', value: 'jar:platform:/resource/copper-monitoring-client/libs/jfxrt-javadoc.zip!/']);
                        }
                        // workaround to append sources for Jemmy
                        if (classpathentry.attributes().path.contains('Jemmy3AWTInput-0.9.3-SNAPSHOT')) {
                            Map attributes = classpathentry.attributes();
                            attributes.put('sourcepath', 'libs/Jemmy3AWTInput-0.9.3-SNAPSHOT-sources.jar');
                            root.appendNode('classpathentry', attributes);
                            root.remove(classpathentry);
                        }
                        if (classpathentry.attributes().path.contains('Jemmy3Core-0.9.3-SNAPSHOT')) {
                            Map attributes = classpathentry.attributes();
                            attributes.put('sourcepath', 'libs/Jemmy3Core-0.9.3-SNAPSHOT-sources.jar');
                            root.appendNode('classpathentry', attributes);
                            root.remove(classpathentry);
                        }
                        if (classpathentry.attributes().path.contains('JemmyFX-0.9.3-SNAPSHOT')) {
                            Map attributes = classpathentry.attributes();
                            attributes.put('sourcepath', 'libs/JemmyFX-0.9.3-SNAPSHOT-sources.jar');
                            root.appendNode('classpathentry', attributes);
                            root.remove(classpathentry);
                        }
                    }
                }
            }
        }
    }

    configurations {
        jfxant
    }

    dependencies {
        jfxant files("libs/ant-javafx.jar")

        compile project(':projects:copper-monitoring:copper-monitoring-core')
        compile files('libs/jfxrt.jar')
        compile files('libs/ScenicView.jar')

        compile 'com.google.guava:guava:14.0.1'

        //Spring remote
        compile 'org.springframework:spring-web:3.1.2.RELEASE'
        compile 'commons-httpclient:commons-httpclient:3.1'

        compile 'org.slf4j:slf4j-log4j12:1.6.6'

        testCompile files("libs/Jemmy3AWTInput-0.9.3-SNAPSHOT.jar")
        testCompile files("libs/Jemmy3Core-0.9.3-SNAPSHOT.jar")
        testCompile files("libs/JemmyFX-0.9.3-SNAPSHOT.jar")
    }

    def libTempDir = "${buildDir}/deployfxtmp/tmp"

    task copyLibs(type: Copy) {
        from { configurations.default }
        into libTempDir
        exclude "*jfxrt.jar"
        exclude "*java2html.jar"
    }

    task('deployfx', dependsOn: [jar, copyLibs]) {
        def antfx = NamespaceBuilder.newInstance(ant, 'javafx:com.sun.javafx.tools.ant')

        ant.taskdef(
                resource: 'com/sun/javafx/tools/ant/antlib.xml',
                uri: 'javafx:com.sun.javafx.tools.ant',
                classpath: configurations.jfxant.asPath)

        doLast {
            def appId = 'Copper-Monitor'
            antfx.application(
                    id: appId,
                    name: 'Copper-Monitor',
                    mainClass: mainClassName,
                    fallbackClass: 'com.javafx.main.NoJavaFXFallback')

            antfx.signjar(
                    keyStore: "${projectDir}/src/dist/keystore.jks",
                    destdir: libTempDir,
                    alias: "scoop",
                    storePass: "copper47284",
                    keyPass: "copper47284") {
                fileset(dir: libTempDir)
                fileset(dir: "${buildDir}/libs")
            }

            antfx.deploy(
                    outdir: "${buildDir}/deployfx",
                    outfile: 'copper-monitor',
                    height: '300',
                    width: '500',
                    placeholderid: 'copper-monitor-applet',
                    placeholderref: 'copper-monitor-applet',
                    offlineAllowed: true) {

                antfx.info(
                        title: "COPPER Monitor",
                        vendor: "copper-engine.org developer team",
                        description: "COPPER monitoring client",
                        license: "Apache License v2.0",
                        copyright: "copper-engine.org developer team"
                )

                antfx.resources() {
                    fileset(dir: libTempDir)
                }

                permissions(elevated: "true", cacheCertificates: "true")

                application(refid: appId)
            }

            //delete(libTempDir);
        }
    }
}


project(':projects:copper-monitoring:copper-monitoring-core') {
    dependencies {
        compile 'org.apache.shiro:shiro-core:1.2.2'
        compile 'org.apache.shiro:shiro-spring:1.2.2'
        compile 'com.esotericsoftware.kryo:kryo:2.21'
        compile 'com.google.guava:guava:14.0.1'
    }
}


project(':projects:copper-monitoring:copper-monitoring-example') {
    sourceSets {
        workflow {
            ext.srcDir = "$projectDir/src/workflow/java"
        }
    }
    sourceSets.main.resources.srcDirs += sourceSets.workflow.srcDir

    dependencies {
        compile project(':projects:copper-monitoring:copper-monitoring-server')
        compile project(':projects:copper-coreengine')
        compile 'ch.qos.logback:logback-classic:1.0.13'
        compile 'org.apache.derby:derby:10.9.1.0'
    }
}
