subprojects {

    if (!project.name.endsWith("projects") && !project.name.endsWith("copper-examples") && !project.name.endsWith("orchestration")) {

        apply plugin: 'java'
        apply plugin: 'eclipse'

        repositories {
            mavenCentral()
        }

        dependencies {
            testCompile 'junit:junit:3.8.1'
        }

        jar {
            manifest.attributes provider: 'gradle'
        }

        task replace_headers << {
            def licenseFile = file("$rootDir/common/apache-license-file.txt")
            def licenseHeader
        	
            ant.loadfile(srcFile: licenseFile, property: 'licenseHeader')
        	
            licenseHeader = "${ant.properties['licenseHeader']}"
        	
            //println "Replacing java source file headers with"
            //println licenseHeader
           	
            licenseHeader = licenseHeader + "package "
           	
            ant.replaceregexp(match: '(/\\*.*\\*/.*)??^package ', flags: 'sm', replace: licenseHeader) {
                fileset(dir: "$projectDir/src") {
                    include(name: '**/*.java')
                }
            }
        }

        compileJava.dependsOn replace_headers

        // build additional artifacts
 
        task sourcesJar(type: Jar, dependsOn:classes) {
            classifier = 'sources'
            from sourceSets.main.allSource
        }

        task javadocJar(type: Jar, dependsOn:javadoc) {
            classifier = 'javadoc'
            from javadoc.destinationDir
        }

        testJava = file("src/test/java").isDirectory() 

        if (testJava) {
            task testJar(type: Jar, dependsOn:testClasses) {
                classifier = 'test'
                from sourceSets.test.output
            }
	
            task testSourcesJar(type: Jar, dependsOn:testJar) {
                classifier = 'testSources'
                from sourceSets.test.allSource
            }

            assemble.dependsOn testJar
            assemble.dependsOn testSourcesJar
        }

        databaseScripts = file("src/main/database").isDirectory() 

        if (databaseScripts) {
            task scriptsZip(type: Zip) {
                classifier = 'scripts'
                from file("src/main/database")
                into 'scripts/sql'
            }

            assemble.dependsOn scriptsZip
        }

        artifacts {      
	        archives sourcesJar      
        	archives javadocJar
            if (testJava) {
	           archives testJar
	           archives testSourcesJar
            }
            if (databaseScripts) {
               archives scriptsZip
            }
        }   
    }
}

project(':projects:copper-coreengine') {
    sourceSets {
        main {
            java {
                srcDir = "$projectDir/src/workflow/java"
            }
        }
    }

    dependencies {
		compile 'aopalliance:aopalliance:1.0'
		
		// asm
		compile 'asm:asm:3.3.1'
		compile 'asm:asm-commons:3.3.1'
		compile 'asm:asm-tree:3.3.1'
		compile 'asm:asm-util:3.3.1'
		compile 'asm:asm-analysis:3.3.1'

		// commons
		compile 'commons-codec:commons-codec:1.4'
		compile 'commons-logging:commons-logging:1.1.1'
		
		// logging
		compile 'org.slf4j:slf4j-api:1.6.6'
		compile 'org.slf4j:slf4j-log4j12:1.6.6'
		compile 'log4j:log4j:1.2.17'
		 
		// Spring
		compile 'org.springframework:spring-aop:3.1.2.RELEASE'
		compile 'org.springframework:spring-asm:3.1.2.RELEASE'
		compile 'org.springframework:spring-beans:3.1.2.RELEASE'
		compile 'org.springframework:spring-context:3.1.2.RELEASE'
		compile 'org.springframework:spring-core:3.1.2.RELEASE'
		compile 'org.springframework:spring-expression:3.1.2.RELEASE'
		compile 'org.springframework:spring-jdbc:3.1.2.RELEASE'
		compile 'org.springframework:spring-tx:3.1.2.RELEASE'
		
		compile 'org.springframework.batch:spring-batch-infrastructure:2.1.8.RELEASE'
		
		// Database
		compile 'c3p0:c3p0:0.9.1.2'
		compile 'c3p0:c3p0-oracle-thin-extras:0.9.0.2'
		compile 'mysql:mysql-connector-java:5.1.21'
		compile 'org.apache.derby:derby:10.9.1.0'
		compile 'postgresql:postgresql:9.1-901.jdbc4'    
		
		compile fileTree(dir: '$rootDir/3rdPartyLibs', includes: ['*.jar'])

    }

}

project(':projects:copper-examples:orchestration:orch-engine') {
    sourceSets {
        main {
            java {
                srcDir = "$projectDir/src/workflow/java"
            }
        }
    }

    dependencies {
	compile project(':projects:copper-coreengine')
	compile project(':projects:copper-examples:orchestration:orch-interfaces')
	compile 'log4j:log4j:1.2.17'
    }
}

project(':projects:copper-examples:orchestration:orch-interfaces') {

    configurations {
        wsgen
    }

    sourceSets {
        schema {
            ext.srcDir = "$projectDir/src/main/schema"
        }
    }
    sourceSets.main.resources.srcDirs += sourceSets.schema.srcDir
    
    dependencies {
		
	compile project(':projects:copper-coreengine')
	compile 'log4j:log4j:1.2.17'

    	compile ('org.apache.cxf:cxf-rt-transports-http-jetty:2.5.3') {
    		exclude module: 'spring-web'
    	}
    	compile ('org.apache.cxf:cxf-rt-frontend-jaxws:2.5.3') {
    		exclude module: 'spring-web'
    	}
    	compile 'org.eclipse.jetty:jetty-server:7.5.4.v20111024'
        compile 'commons-lang:commons-lang:2.6'

        wsgen 'org.apache.cxf:cxf-tools-wsdlto-core:2.6.0'
        wsgen 'org.apache.cxf:cxf-tools-wsdlto-frontend-jaxws:2.6.0'
        wsgen 'org.apache.cxf:cxf-tools-wsdlto-databinding-jaxb:2.6.0'
        wsgen 'org.apache.cxf:cxf-xjc-ts:2.2.12'
        wsgen 'com.sun.xml.bind:jaxb-xjc:2.2.4-1'		
    }

	tasks.add(name: "gen_wsbindings") {
		ext.genDirName = "$buildDir/gen.wsdls.src"
			
		inputs.dir new File(sourceSets.schema.srcDir)
    	outputs.dir new File(ext.genDirName)

        doFirst {
        	new File(ext.genDirName).mkdirs()
        }    	
		doLast {
	        fileTree(dir: sourceSets.schema.srcDir + "/wsdl", include: "**/*.wsdl", exclude: "common.wsdl").each { def wsdlFile -> 
				javaexec {					
			        main = 'org.apache.cxf.tools.wsdlto.WSDLToJava'
			        classpath = configurations.wsgen
			        args '-fe', 'jaxws',	        		
			                '-db', 'jaxb',
			                '-xjc-extension',
			                '-impl', '-server', '-client', '-validate',
			                '-d', ext.genDirName,
                            '-wsdlLocation', 'classpath:wsdl/'+wsdlFile.name,
			                wsdlFile
			    }	            
		    } 
        }		
	}
	sourceSets.main.java.srcDirs += gen_wsbindings.genDirName	
	
	compileJava.dependsOn gen_wsbindings
	eclipseClasspath.dependsOn gen_wsbindings    

}

project(':projects:copper-examples:orchestration:orch-simulators') {
    dependencies {
	compile project(':projects:copper-coreengine')
	compile project(':projects:copper-examples:orchestration:orch-interfaces')
	compile 'log4j:log4j:1.2.17'
    }
}

