subprojects {

    if (!project.name.endsWith("projects")) {

        apply plugin: 'java'
        apply plugin: 'eclipse'

        repositories {
            mavenCentral()
        }

        dependencies {
            testCompile 'junit:junit:3.8.1'
        }

        jar {
            manifest.attributes provider: 'gradle'
        }

        task replace_headers << {
            def licenseFile = file("$projectDir/../../common/apache-license-file.txt")
            def licenseHeader
        	
            ant.loadfile(srcFile: licenseFile, property: 'licenseHeader')
        	
            licenseHeader = "${ant.properties['licenseHeader']}"
        	
            //println "Replacing java source file headers with"
            //println licenseHeader
           	
            licenseHeader = licenseHeader + "package "
           	
            ant.replaceregexp(match: '(/\\*.*\\*/.*)??^package ', flags: 'sm', replace: licenseHeader) {
                fileset(dir: "$projectDir/src") {
                    include(name: '**/*.java')
                }
            }
        }

        compileJava.dependsOn replace_headers

        // build additional artifacts
 
        task sourcesJar(type: Jar, dependsOn:classes) {
            classifier = 'sources'
            from sourceSets.main.allSource
        }

        task javadocJar(type: Jar, dependsOn:javadoc) {
            classifier = 'javadoc'
            from javadoc.destinationDir
        }

        testJava = file("src/test/java").isDirectory() 

        if (testJava) {
            task testJar(type: Jar, dependsOn:testClasses) {
                classifier = 'test'
                from sourceSets.test.output
            }
	
            task testSourcesJar(type: Jar, dependsOn:testJar) {
                classifier = 'testSources'
                from sourceSets.test.allSource
            }

            assemble.dependsOn testJar
            assemble.dependsOn testSourcesJar
        }

        databaseScripts = file("src/main/database").isDirectory() 

        if (databaseScripts) {
            task scriptsZip(type: Zip) {
                classifier = 'scripts'
                from file("src/main/database")
                into 'scripts/sql'
            }

            assemble.dependsOn scriptsZip
        }

        artifacts {      
	        archives sourcesJar      
        	archives javadocJar
            if (testJava) {
	           archives testJar
	           archives testSourcesJar
            }
            if (databaseScripts) {
               archives scriptsZip
            }
        }   
    }
}

